/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET Daml SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.daml.ledger.api.v1.{value => $u0020rpcvalue}
import _root_.com.daml.ledger.client.{binding => $u0020lfdomainapi}
package co.topl.daml.driver.models.assets



final case class MintAsset(assetCode: ` lfdomainapi`.Primitive.Text, quantity: ` lfdomainapi`.Primitive.Int64) extends ` lfdomainapi`.ValueRef

object MintAsset extends ` lfdomainapi`.ValueRefCompanion with _root_.scala.Function2[` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Int64, _root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val assetCode: ` C`[` lfdomainapi`.Primitive.Text];
        val quantity: ` C`[` lfdomainapi`.Primitive.Int64];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val assetCode = ` f`(` view`.assetCode);
            override val quantity = ` f`(` view`.quantity)
          };
          new $anon()
        }
      };
      implicit val `MintAsset Value`: ` lfdomainapi`.Value[_root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] = {
        final class $anon extends this.`Value ValueRef`[_root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] {
          override def write(value: _root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset): ` rpcvalue`.Value.Sum = ` record`(scala.Tuple2("assetCode", ` lfdomainapi`.Value.encode(value.assetCode)), scala.Tuple2("quantity", ` lfdomainapi`.Value.encode(value.quantity)));
          override def read(argValue: ` rpcvalue`.Value.Sum): _root_.scala.Option[_root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] = argValue.record.flatMap(((` r` ) => if (` r`.fields.length.==(2))
            ` r`.fields(0) match {
              case ` rpcvalue`.RecordField((""| "assetCode"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv0) match {
                case _root_.scala.Some(assetCode) => (` r`.fields(1) match {
                  case ` rpcvalue`.RecordField((""| "quantity"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Int64](zv1) match {
                    case _root_.scala.Some(quantity) => Some(MintAsset(assetCode, quantity))
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            }
          else
            _root_.scala.None))
        };
        new $anon()
      };
      override protected val ` dataTypeId` = ` mkDataTypeId`(`Package IDs`.DemoAssets, "DemoAssets", "MintAsset");
      implicit def `MintAsset LfEncodable`: ` lfdomainapi`.encoding.LfEncodable[_root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] = {
        final class $anon extends ` lfdomainapi`.encoding.LfEncodable[_root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] {
          override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): lte.Out[_root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] = {
            object `view ` extends view[lte.Field] {
              val assetCode = lte.field("assetCode", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
              val quantity = lte.field("quantity", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Int64](lte))
            };
            {
              val `recordFields `: lte.RecordFields[_root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset] = lte.RecordFields.xmapN(lte.fields(`view `.assetCode), lte.fields(`view `.quantity))({
                case scala.Tuple2(assetCode, quantity) => _root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset(assetCode, quantity)
              })({
                case _root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset(assetCode, quantity) => scala.Tuple2(assetCode, quantity)
              });
              lte.record(` dataTypeId`, `recordFields `)
            }
          }
        };
        new $anon()
      }
    }
