/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET Daml SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.daml.ledger.api.v1.{value => $u0020rpcvalue}
import _root_.com.daml.ledger.client.{binding => $u0020lfdomainapi}
package co.topl.daml.driver.models.assets



final case class DemoAssets(issuer: ` lfdomainapi`.Primitive.Party, owner: ` lfdomainapi`.Primitive.Party) extends ` lfdomainapi`.Template[DemoAssets] {
      override protected[this] def templateCompanion(implicit ` d` : ` lfdomainapi`.Compat.DummyImplicit) = DemoAssets
    }

object DemoAssets extends ` lfdomainapi`.TemplateCompanion[DemoAssets] with _root_.scala.Function2[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, _root_.com.daml.quickstart.iou.model.DemoAssets.DemoAssets] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val issuer: ` C`[` lfdomainapi`.Primitive.Party];
        val owner: ` C`[` lfdomainapi`.Primitive.Party];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val issuer = ` f`(` view`.issuer);
            override val owner = ` f`(` view`.owner)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.DemoAssets, moduleName = "DemoAssets", entityName = "DemoAssets");
      final implicit class `DemoAssets syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, DemoAssets]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(actor, id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, DemoAssets]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.daml.quickstart.iou.model.DA.Internal.Template.Archive());
        def exerciseMintAsset(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.daml.quickstart.iou.model.DemoAssets.MintAsset)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, DemoAssets]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.DemoAssets.Asset]] = ` exercise`(actor, id, "MintAsset", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseMintAsset(actor: ` lfdomainapi`.Primitive.Party, assetCode: ` lfdomainapi`.Primitive.Text, quantity: ` lfdomainapi`.Primitive.Int64)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, DemoAssets]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.daml.quickstart.iou.model.DemoAssets.Asset]] = exerciseMintAsset(actor, _root_.com.daml.quickstart.iou.model.DemoAssets.MintAsset(assetCode, quantity))
      };
      type key = _root_.scala.Nothing;
      override val consumingChoices: _root_.scala.collection.immutable.Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(_root_.scala.collection.immutable.Set("Archive"));
      override def toNamedArguments(` self` : DemoAssets) = ` arguments`(scala.Tuple2("issuer", ` lfdomainapi`.Value.encode(` self`.issuer)), scala.Tuple2("owner", ` lfdomainapi`.Value.encode(` self`.owner)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(2))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "issuer"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "owner"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                case _root_.scala.Some(z1) => Some(DemoAssets(z0, z1))
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val issuer = lte.field("issuer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val owner = lte.field("owner", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.daml.quickstart.iou.model.DemoAssets.DemoAssets] = {
        val `recordFields `: lte.RecordFields[_root_.com.daml.quickstart.iou.model.DemoAssets.DemoAssets] = lte.RecordFields.xmapN(lte.fields(`view `.issuer), lte.fields(`view `.owner))({
          case scala.Tuple2(issuer, owner) => _root_.com.daml.quickstart.iou.model.DemoAssets.DemoAssets(issuer, owner)
        })({
          case _root_.com.daml.quickstart.iou.model.DemoAssets.DemoAssets(issuer, owner) => scala.Tuple2(issuer, owner)
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
