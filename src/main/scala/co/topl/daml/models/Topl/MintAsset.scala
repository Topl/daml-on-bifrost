/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET Daml SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.daml.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.daml.ledger.api.v1.{value=>$u0020rpcvalue}
package co.topl.daml.models {
  package Topl {
    final case class MintAsset(recipient: ` lfdomainapi`.Primitive.Party, nonce: ` lfdomainapi`.Primitive.Text, id: ` lfdomainapi`.Primitive.Text, evidence: ` lfdomainapi`.Primitive.Text, quantity: ` lfdomainapi`.Primitive.Text, assetCode: ` lfdomainapi`.Primitive.Text, metadata: ` lfdomainapi`.Primitive.Text, securityRoot: ` lfdomainapi`.Primitive.Text) extends ` lfdomainapi`.ValueRef

    object MintAsset extends ` lfdomainapi`.ValueRefCompanion with _root_.scala.Function8[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Text, _root_.co.topl.daml.models.Topl.MintAsset] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val recipient: ` C`[` lfdomainapi`.Primitive.Party];
        val nonce: ` C`[` lfdomainapi`.Primitive.Text];
        val id: ` C`[` lfdomainapi`.Primitive.Text];
        val evidence: ` C`[` lfdomainapi`.Primitive.Text];
        val quantity: ` C`[` lfdomainapi`.Primitive.Text];
        val assetCode: ` C`[` lfdomainapi`.Primitive.Text];
        val metadata: ` C`[` lfdomainapi`.Primitive.Text];
        val securityRoot: ` C`[` lfdomainapi`.Primitive.Text];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val recipient = ` f`(` view`.recipient);
            override val nonce = ` f`(` view`.nonce);
            override val id = ` f`(` view`.id);
            override val evidence = ` f`(` view`.evidence);
            override val quantity = ` f`(` view`.quantity);
            override val assetCode = ` f`(` view`.assetCode);
            override val metadata = ` f`(` view`.metadata);
            override val securityRoot = ` f`(` view`.securityRoot)
          };
          new $anon()
        }
      };
      implicit val `MintAsset Value`: ` lfdomainapi`.Value[_root_.co.topl.daml.models.Topl.MintAsset] = {
        final class $anon extends this.`Value ValueRef`[_root_.co.topl.daml.models.Topl.MintAsset] {
          override def write(value: _root_.co.topl.daml.models.Topl.MintAsset): ` rpcvalue`.Value.Sum = ` record`(scala.Tuple2("recipient", ` lfdomainapi`.Value.encode(value.recipient)), scala.Tuple2("nonce", ` lfdomainapi`.Value.encode(value.nonce)), scala.Tuple2("id", ` lfdomainapi`.Value.encode(value.id)), scala.Tuple2("evidence", ` lfdomainapi`.Value.encode(value.evidence)), scala.Tuple2("quantity", ` lfdomainapi`.Value.encode(value.quantity)), scala.Tuple2("assetCode", ` lfdomainapi`.Value.encode(value.assetCode)), scala.Tuple2("metadata", ` lfdomainapi`.Value.encode(value.metadata)), scala.Tuple2("securityRoot", ` lfdomainapi`.Value.encode(value.securityRoot)));
          override def read(argValue: ` rpcvalue`.Value.Sum): _root_.scala.Option[_root_.co.topl.daml.models.Topl.MintAsset] = argValue.record.flatMap(((` r` ) => if (` r`.fields.length.==(8))
            ` r`.fields(0) match {
              case ` rpcvalue`.RecordField((""| "recipient"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
                case _root_.scala.Some(recipient) => (` r`.fields(1) match {
                  case ` rpcvalue`.RecordField((""| "nonce"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv1) match {
                    case _root_.scala.Some(nonce) => (` r`.fields(2) match {
                      case ` rpcvalue`.RecordField((""| "id"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv2) match {
                        case _root_.scala.Some(id) => (` r`.fields(3) match {
                          case ` rpcvalue`.RecordField((""| "evidence"), _root_.scala.Some(zv3)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv3) match {
                            case _root_.scala.Some(evidence) => (` r`.fields(4) match {
                              case ` rpcvalue`.RecordField((""| "quantity"), _root_.scala.Some(zv4)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv4) match {
                                case _root_.scala.Some(quantity) => (` r`.fields(5) match {
                                  case ` rpcvalue`.RecordField((""| "assetCode"), _root_.scala.Some(zv5)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv5) match {
                                    case _root_.scala.Some(assetCode) => (` r`.fields(6) match {
                                      case ` rpcvalue`.RecordField((""| "metadata"), _root_.scala.Some(zv6)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv6) match {
                                        case _root_.scala.Some(metadata) => (` r`.fields(7) match {
                                          case ` rpcvalue`.RecordField((""| "securityRoot"), _root_.scala.Some(zv7)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv7) match {
                                            case _root_.scala.Some(securityRoot) => Some(MintAsset(recipient, nonce, id, evidence, quantity, assetCode, metadata, securityRoot))
                                            case _root_.scala.None => _root_.scala.None
                                          })
                                          case _ => _root_.scala.None
                                        })
                                        case _root_.scala.None => _root_.scala.None
                                      })
                                      case _ => _root_.scala.None
                                    })
                                    case _root_.scala.None => _root_.scala.None
                                  })
                                  case _ => _root_.scala.None
                                })
                                case _root_.scala.None => _root_.scala.None
                              })
                              case _ => _root_.scala.None
                            })
                            case _root_.scala.None => _root_.scala.None
                          })
                          case _ => _root_.scala.None
                        })
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            }
          else
            _root_.scala.None))
        };
        new $anon()
      };
      override protected val ` dataTypeId` = ` mkDataTypeId`(`Package IDs`.Topl, "Topl", "MintAsset");
      implicit def `MintAsset LfEncodable`: ` lfdomainapi`.encoding.LfEncodable[_root_.co.topl.daml.models.Topl.MintAsset] = {
        final class $anon extends ` lfdomainapi`.encoding.LfEncodable[_root_.co.topl.daml.models.Topl.MintAsset] {
          override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): lte.Out[_root_.co.topl.daml.models.Topl.MintAsset] = {
            object `view ` extends view[lte.Field] {
              val recipient = lte.field("recipient", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
              val nonce = lte.field("nonce", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
              val id = lte.field("id", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
              val evidence = lte.field("evidence", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
              val quantity = lte.field("quantity", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
              val assetCode = lte.field("assetCode", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
              val metadata = lte.field("metadata", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
              val securityRoot = lte.field("securityRoot", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte))
            };
            {
              val `recordFields `: lte.RecordFields[_root_.co.topl.daml.models.Topl.MintAsset] = lte.RecordFields.xmapN(lte.fields(`view `.recipient), lte.fields(`view `.nonce), lte.fields(`view `.id), lte.fields(`view `.evidence), lte.RecordFields.tupleN(lte.fields(`view `.quantity), lte.fields(`view `.assetCode), lte.fields(`view `.metadata), lte.fields(`view `.securityRoot)))({
                case scala.Tuple5(recipient, nonce, id, evidence, scala.Tuple4(quantity, assetCode, metadata, securityRoot)) => _root_.co.topl.daml.models.Topl.MintAsset(recipient, nonce, id, evidence, quantity, assetCode, metadata, securityRoot)
              })({
                case _root_.co.topl.daml.models.Topl.MintAsset(recipient, nonce, id, evidence, quantity, assetCode, metadata, securityRoot) => scala.Tuple5(recipient, nonce, id, evidence, scala.Tuple4(quantity, assetCode, metadata, securityRoot))
              });
              lte.record(` dataTypeId`, `recordFields `)
            }
          }
        };
        new $anon()
      }
    }
  }
}
